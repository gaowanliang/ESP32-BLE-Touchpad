// touchpad_demo.ino
#include <ps2.h>
#include <synaptics.h>
#include <Arduino.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <esp_task_wdt.h>

#ifndef min
#define min(a, b) ((a) < (b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a) > (b) ? (a) : (b))
#endif

#ifndef sign
#define sign(x) ((x) > 0 ? (1) : ((x) < 0 ? (-1) : (0)))
#endif

// 定义GPIO引脚
const int CLOCK_PIN = 23; // ESP32的GPIO23
const int DATA_PIN = 5;   // ESP32的GPIO5

// 防抖和优化相关常量
const float noise_threshold_tracking_mm = 0.08;
const float noise_threshold_scrolling_mm = 0.09;
const int frames_delay = 6;
const int frames_stablization = 15;
const float scale_tracking_mm = 12.0;
const float scale_scroll_mm = 1.6;
const float slow_scroll_threshold_mm = 2.0;
const float max_delta_mm = 3;
const int proximity_threshold_mm = 15;
const float slow_scroll_amount = 0.20F;

// 新增常量
const int SCROLL_THRESHOLD = 50;       // 滚动阈值，根据实际情况调整
const int MIDDLE_CLICK_DURATION = 100; // 中键点击持续时间（毫秒）
const float SCROLL_SENSITIVITY = 0.5;  // 调整这个值来改变滚动灵敏度

// 全局变量
volatile uint64_t g_received_packet = 0;
volatile bool g_packet_ready = false;
static unsigned long global_tick = 0;
static unsigned long session_started_tick = 0;
static unsigned long button_released_tick = 0;
int last_y = 0;
unsigned long three_finger_start = 0;
bool middle_button_pressed = false;
unsigned long finger_down_time = 0;
bool is_tapping = false;
const unsigned long TAP_TIMEOUT = 400; // 点击超时时间（毫秒）
float scroll_accumulator = 0;

struct TouchInfo
{
    int x;
    int y;
    int z;
    int fingers;
    bool button;
};

struct finger_state
{
    SimpleAverage<int, 5> x;
    SimpleAverage<int, 5> y;
    short z;
};

struct report
{
    uint8_t buttons;
    int8_t x;
    int8_t y;
    int8_t scroll;
};

RingBuffer<report, 32> reports;
static finger_state finger_states[2];
static short finger_count = 0;
static uint8_t button_state = 0;

const uint8_t LEFT_BUTTON = 0x01;
const uint8_t RIGHT_BUTTON = 0x02;
const uint8_t MIDDLE_BUTTON = 0x04;

// 变量
float scale_tracking_x, scale_tracking_y;
float scale_scroll;
float noise_threshold_tracking_x, noise_threshold_tracking_y;
float noise_threshold_scrolling_y;
float max_delta_x, max_delta_y;
float slow_scroll_threshold;
float proximity_threshold_x, proximity_threshold_y;

void IRAM_ATTR byte_received(uint8_t data)
{
    static uint64_t buffer = 0;
    static int index = 0;

    buffer |= ((uint64_t)data) << index;
    index += 8;
    if (index == 48)
    {
        g_received_packet = buffer;
        g_packet_ready = true;
        index = 0;
        buffer = 0;
    }
}

float to_hid_value(float value, float threshold, float scale_factor)
{
    const float hid_max = 127.0F;
    if (abs(value) < threshold)
    {
        return 0;
    }
    return sign(value) * min(max(abs(value) * scale_factor, 1.0F), hid_max);
}

void queue_report(uint8_t buttons, int8_t x, int8_t y, float scroll)
{
    static float scroll_amount_rollover = 0;
    report item = {.buttons = buttons};
    if (button_released_tick != 0 &&
        global_tick - button_released_tick < frames_stablization)
    {
        item.x = 0;
        item.y = 0;
        item.scroll = 0;
    }
    else
    {
        if (scroll > -1.0F && scroll < 1.0F)
        {
            scroll_amount_rollover += scroll;
            if (scroll_amount_rollover >= 1.0F)
            {
                scroll = 1.0F;
                scroll_amount_rollover -= 1.0F;
            }
            else if (scroll_amount_rollover <= -1.0F)
            {
                scroll = -1.0F;
                scroll_amount_rollover += 1.0F;
            }
            else
            {
                scroll = 0;
            }
        }
        item.x = x;
        item.y = y;
        item.scroll = scroll;
    }
    reports.push_back(item);
}
void process_packet(uint64_t packet)
{
    global_tick++;
    int x = (packet >> 32) & 0x00FF | (packet >> 0) & 0x0F00 | (packet >> 16) & 0x1000;
    int y = (packet >> 40) & 0x00FF | (packet >> 4) & 0x0F00 | (packet >> 17) & 0x1000;
    short z = (packet >> 16) & 0xFF;
    uint8_t w = (packet >> 26) & 0x01 | (packet >> 1) & 0x2 | (packet >> 2) & 0x0C;
    bool physical_button = (packet >> 24) & 0x01;

    int new_finger_count = 0;
    if (z == 0)
    {
        new_finger_count = 0;
    }
    else if (w >= 4)
    {
        new_finger_count = 1;
    }
    else if (w == 0)
    {
        new_finger_count = 2;
    }
    else if (w == 1)
    {
        new_finger_count = 3;
    }

    if (finger_count == 0 && new_finger_count > 0)
    {
        session_started_tick = global_tick;
        last_y = y;
        finger_down_time = millis();
        is_tapping = true;
    }

    // 处理点击和按钮状态
    if (new_finger_count == 0 && finger_count > 0)
    {
        // 手指抬起
        if (is_tapping && (millis() - finger_down_time) < TAP_TIMEOUT)
        {
            // 这是一个点击
            if (finger_count == 1)
            {
                queue_report(LEFT_BUTTON, 0, 0, 0);
                queue_report(0, 0, 0, 0); // 立即释放按钮
            }
            else if (finger_count == 2)
            {
                queue_report(RIGHT_BUTTON, 0, 0, 0);
                queue_report(0, 0, 0, 0); // 立即释放按钮
            }
        }
        is_tapping = false;
    }
    else if (new_finger_count > 0 && (millis() - finger_down_time) >= TAP_TIMEOUT)
    {
        is_tapping = false;
    }

    // 处理物理按钮
    if (physical_button && button_state == 0)
    {
        button_state = new_finger_count < 2 ? LEFT_BUTTON : RIGHT_BUTTON;
        queue_report(button_state, 0, 0, 0);
    }
    else if (!physical_button && button_state != 0)
    {
        queue_report(0, 0, 0, 0);
        button_state = 0;
    }

    // 更新状态变量
    int delta_x = 0, delta_y = 0;

    if (new_finger_count > 0)
    {
        finger_states[0].z = z;

        int prev_x = finger_states[0].x.average();
        int new_x = finger_states[0].x.filter(x);
        if (prev_x > 0 && new_finger_count == finger_count)
        {
            delta_x = new_x - prev_x;
        }

        int prev_y = finger_states[0].y.average();
        int new_y = finger_states[0].y.filter(y);
        if (prev_y > 0 && new_finger_count == finger_count)
        {
            delta_y = new_y - prev_y;
        }
    }

    // 状态机逻辑
    if (new_finger_count == 2 && !physical_button)
    {
        // 双指滚动
        int scroll_delta = y - last_y;
        scroll_accumulator += scroll_delta;

        float scroll_amount = to_hid_value(scroll_accumulator, noise_threshold_scrolling_y, scale_scroll * SCROLL_SENSITIVITY);

        if (scroll_amount != 0)
        {
            queue_report(button_state, 0, 0, scroll_amount);
            scroll_accumulator -= (scroll_amount / (scale_scroll * SCROLL_SENSITIVITY));
        }

        last_y = y;
    }
    else if (new_finger_count == 3)
    {
        // 三指点击
        if (finger_count != 3)
        {
            three_finger_start = millis();
        }
        else if (!middle_button_pressed && millis() - three_finger_start > MIDDLE_CLICK_DURATION)
        {
            middle_button_pressed = true;
            queue_report(MIDDLE_BUTTON, 0, 0, 0); // 按下中键
        }
    }
    else if (new_finger_count == 1 || (new_finger_count >= 2 && physical_button))
    {
        // 单指或多指跟踪
        float threshold_multiplier = new_finger_count == 1 ? 1.0 : 2.0;
        if (w > 4)
        {
            threshold_multiplier *= 1.0F + (w - 4.0F) / 4.0F;
        }
        if (z >= 60)
        {
            threshold_multiplier *= 1.0F + (z - 60.0F) / 40.0F;
        }

        float delta_x_mm = ((float)delta_x) / ((float)synaptics::units_per_mm_x);
        float delta_y_mm = ((float)delta_y) / ((float)synaptics::units_per_mm_y);
        float velocity = sqrt(delta_x_mm * delta_x_mm + delta_y_mm * delta_y_mm);
        if (new_finger_count > 1)
        {
            velocity *= 2;
        }
        float scale_multiplier = 1.0F + velocity * 0.5F;

        int8_t delta_x_hid = to_hid_value(delta_x, noise_threshold_tracking_x * threshold_multiplier, scale_tracking_x * scale_multiplier);
        int8_t delta_y_hid = -to_hid_value(delta_y, noise_threshold_tracking_y * threshold_multiplier, scale_tracking_y * scale_multiplier);
        queue_report(button_state, delta_x_hid, delta_y_hid, 0);
    }

    if (finger_count == 3 && new_finger_count != 3)
    {
        // 三指释放
        if (middle_button_pressed)
        {
            middle_button_pressed = false;
            queue_report(0, 0, 0, 0); // 释放中键
        }
    }

    finger_count = new_finger_count;
}

void touchpadTask(void *pvParameters)
{
    const TickType_t xDelay = pdMS_TO_TICKS(10);

    while (1)
    {
        esp_task_wdt_reset(); // 喂狗

        if (g_packet_ready)
        {
            uint64_t packet = g_received_packet;
            g_packet_ready = false;

            process_packet(packet);
        }

        if (global_tick - session_started_tick >= frames_delay)
        {
            if (!reports.empty())
            {
                report item = reports.pop_front();
                // hid::report(item.buttons, item.x, item.y, item.scroll);
                Serial.printf("Buttons: %d, X: %d, Y: %d, Scroll: %d\n", item.buttons, item.x, item.y, item.scroll);
            }
        }

        vTaskDelay(xDelay);
    }
}

void setup()
{
    Serial.begin(115200);
    delay(1000);
    Serial.println("ESP32 Touchpad Test");

    // 初始化PS2通信
    ps2::begin(CLOCK_PIN, DATA_PIN, byte_received);
    ps2::reset();
    synaptics::init();

    // 初始化变量
    scale_tracking_x = scale_tracking_mm / synaptics::units_per_mm_x;
    scale_tracking_y = scale_tracking_mm / synaptics::units_per_mm_y;
    scale_scroll = scale_scroll_mm / synaptics::units_per_mm_y;
    noise_threshold_tracking_x =
        noise_threshold_tracking_mm * synaptics::units_per_mm_x;
    noise_threshold_tracking_y =
        noise_threshold_tracking_mm * synaptics::units_per_mm_y;
    noise_threshold_scrolling_y =
        noise_threshold_scrolling_mm * synaptics::units_per_mm_y;
    max_delta_x = max_delta_mm * synaptics::units_per_mm_x;
    max_delta_y = max_delta_mm * synaptics::units_per_mm_y;
    slow_scroll_threshold = slow_scroll_threshold_mm * synaptics::units_per_mm_y;
    proximity_threshold_x = proximity_threshold_mm * synaptics::units_per_mm_x;
    proximity_threshold_y = proximity_threshold_mm * synaptics::units_per_mm_y;

    // 初始化任务看门狗
    esp_task_wdt_init(10, true); // 10秒超时

    // 创建触摸板处理任务
    xTaskCreatePinnedToCore(
        touchpadTask,   // 任务函数
        "TouchpadTask", // 任务名称
        4096,           // 堆栈大小
        NULL,           // 参数
        1,              // 优先级
        NULL,           // 任务句柄
        1               // 在核心1上运行
    );

    // 将当前运行的核心（通常是核心0）添加到看门狗
    esp_task_wdt_add(NULL);
}

void loop()
{
    // 主循环喂狗
    esp_task_wdt_reset();

    // 可以在这里添加其他非关键任务
    delay(1000);
}